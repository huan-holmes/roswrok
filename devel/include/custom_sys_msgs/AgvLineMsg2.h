// Generated by gencpp from file custom_sys_msgs/AgvLineMsg2.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_AGVLINEMSG2_H
#define CUSTOM_SYS_MSGS_MESSAGE_AGVLINEMSG2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct AgvLineMsg2_
{
  typedef AgvLineMsg2_<ContainerAllocator> Type;

  AgvLineMsg2_()
    : segment_id(0)
    , segment_type(0)
    , attitude(0)
    , tracking_mode(0)
    , speed(0.0)
    , precision(0.0)
    , arrival_time(0.0)
    , departure_time(0.0)
    , redundancy_time(0.0)
    , p_start()
    , p_middle()
    , p_end()
    , start_node_id(0)
    , end_node_id(0)
    , crossing(false)  {
    }
  AgvLineMsg2_(const ContainerAllocator& _alloc)
    : segment_id(0)
    , segment_type(0)
    , attitude(0)
    , tracking_mode(0)
    , speed(0.0)
    , precision(0.0)
    , arrival_time(0.0)
    , departure_time(0.0)
    , redundancy_time(0.0)
    , p_start(_alloc)
    , p_middle(_alloc)
    , p_end(_alloc)
    , start_node_id(0)
    , end_node_id(0)
    , crossing(false)  {
  (void)_alloc;
    }



   typedef int32_t _segment_id_type;
  _segment_id_type segment_id;

   typedef int32_t _segment_type_type;
  _segment_type_type segment_type;

   typedef int32_t _attitude_type;
  _attitude_type attitude;

   typedef int32_t _tracking_mode_type;
  _tracking_mode_type tracking_mode;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _precision_type;
  _precision_type precision;

   typedef double _arrival_time_type;
  _arrival_time_type arrival_time;

   typedef double _departure_time_type;
  _departure_time_type departure_time;

   typedef double _redundancy_time_type;
  _redundancy_time_type redundancy_time;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _p_start_type;
  _p_start_type p_start;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _p_middle_type;
  _p_middle_type p_middle;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _p_end_type;
  _p_end_type p_end;

   typedef int32_t _start_node_id_type;
  _start_node_id_type start_node_id;

   typedef int32_t _end_node_id_type;
  _end_node_id_type end_node_id;

   typedef uint8_t _crossing_type;
  _crossing_type crossing;





  typedef boost::shared_ptr< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> const> ConstPtr;

}; // struct AgvLineMsg2_

typedef ::custom_sys_msgs::AgvLineMsg2_<std::allocator<void> > AgvLineMsg2;

typedef boost::shared_ptr< ::custom_sys_msgs::AgvLineMsg2 > AgvLineMsg2Ptr;
typedef boost::shared_ptr< ::custom_sys_msgs::AgvLineMsg2 const> AgvLineMsg2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d421422889a341f7cf947ef206bc0e3";
  }

  static const char* value(const ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d421422889a341fULL;
  static const uint64_t static_value2 = 0x7cf947ef206bc0e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/AgvLineMsg2";
  }

  static const char* value(const ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 segment_id\n\
int32 segment_type\n\
int32 attitude\n\
int32 tracking_mode\n\
float64 speed\n\
float64 precision\n\
float64 arrival_time\n\
float64 departure_time\n\
float64 redundancy_time\n\
geometry_msgs/Pose p_start\n\
geometry_msgs/Pose p_middle\n\
geometry_msgs/Pose p_end\n\
int32 start_node_id\n\
int32 end_node_id\n\
bool crossing\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.segment_id);
      stream.next(m.segment_type);
      stream.next(m.attitude);
      stream.next(m.tracking_mode);
      stream.next(m.speed);
      stream.next(m.precision);
      stream.next(m.arrival_time);
      stream.next(m.departure_time);
      stream.next(m.redundancy_time);
      stream.next(m.p_start);
      stream.next(m.p_middle);
      stream.next(m.p_end);
      stream.next(m.start_node_id);
      stream.next(m.end_node_id);
      stream.next(m.crossing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgvLineMsg2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator>& v)
  {
    s << indent << "segment_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.segment_id);
    s << indent << "segment_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.segment_type);
    s << indent << "attitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.attitude);
    s << indent << "tracking_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tracking_mode);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "precision: ";
    Printer<double>::stream(s, indent + "  ", v.precision);
    s << indent << "arrival_time: ";
    Printer<double>::stream(s, indent + "  ", v.arrival_time);
    s << indent << "departure_time: ";
    Printer<double>::stream(s, indent + "  ", v.departure_time);
    s << indent << "redundancy_time: ";
    Printer<double>::stream(s, indent + "  ", v.redundancy_time);
    s << indent << "p_start: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.p_start);
    s << indent << "p_middle: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.p_middle);
    s << indent << "p_end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.p_end);
    s << indent << "start_node_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.start_node_id);
    s << indent << "end_node_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.end_node_id);
    s << indent << "crossing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.crossing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_AGVLINEMSG2_H
