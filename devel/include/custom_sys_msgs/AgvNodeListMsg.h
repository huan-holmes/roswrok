// Generated by gencpp from file custom_sys_msgs/AgvNodeListMsg.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_AGVNODELISTMSG_H
#define CUSTOM_SYS_MSGS_MESSAGE_AGVNODELISTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <custom_sys_msgs/AgvNodeMsg.h>

namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct AgvNodeListMsg_
{
  typedef AgvNodeListMsg_<ContainerAllocator> Type;

  AgvNodeListMsg_()
    : node_list()  {
    }
  AgvNodeListMsg_(const ContainerAllocator& _alloc)
    : node_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::custom_sys_msgs::AgvNodeMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::custom_sys_msgs::AgvNodeMsg_<ContainerAllocator> >::other >  _node_list_type;
  _node_list_type node_list;





  typedef boost::shared_ptr< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AgvNodeListMsg_

typedef ::custom_sys_msgs::AgvNodeListMsg_<std::allocator<void> > AgvNodeListMsg;

typedef boost::shared_ptr< ::custom_sys_msgs::AgvNodeListMsg > AgvNodeListMsgPtr;
typedef boost::shared_ptr< ::custom_sys_msgs::AgvNodeListMsg const> AgvNodeListMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2203275847428c3096be7271d54ad404";
  }

  static const char* value(const ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2203275847428c30ULL;
  static const uint64_t static_value2 = 0x96be7271d54ad404ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/AgvNodeListMsg";
  }

  static const char* value(const ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/AgvNodeMsg[] node_list\n\
\n\
================================================================================\n\
MSG: custom_sys_msgs/AgvNodeMsg\n\
int32 node_id\n\
string node_name\n\
int32 node_type\n\
int32 ref_cnt\n\
geometry_msgs/Pose pos\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgvNodeListMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::AgvNodeListMsg_<ContainerAllocator>& v)
  {
    s << indent << "node_list[]" << std::endl;
    for (size_t i = 0; i < v.node_list.size(); ++i)
    {
      s << indent << "  node_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::custom_sys_msgs::AgvNodeMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.node_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_AGVNODELISTMSG_H
