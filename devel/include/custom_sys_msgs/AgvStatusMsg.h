// Generated by gencpp from file custom_sys_msgs/AgvStatusMsg.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_AGVSTATUSMSG_H
#define CUSTOM_SYS_MSGS_MESSAGE_AGVSTATUSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct AgvStatusMsg_
{
  typedef AgvStatusMsg_<ContainerAllocator> Type;

  AgvStatusMsg_()
    : task_id(0)
    , task_mile(0.0)
    , task_progresss(0.0)
    , status_code(0)
    , sub_code(0)
    , segment_id(0)
    , dir(0)
    , segment_mile(0.0)
    , node_id(0)
    , dst_node(0)
    , pose()
    , vell()
    , node_request()
    , node_occupy()
    , node_release()
    , work_mode(0)
    , location_status(0)
    , attitude(0)
    , check_time(0.0)  {
    }
  AgvStatusMsg_(const ContainerAllocator& _alloc)
    : task_id(0)
    , task_mile(0.0)
    , task_progresss(0.0)
    , status_code(0)
    , sub_code(0)
    , segment_id(0)
    , dir(0)
    , segment_mile(0.0)
    , node_id(0)
    , dst_node(0)
    , pose(_alloc)
    , vell(_alloc)
    , node_request(_alloc)
    , node_occupy(_alloc)
    , node_release(_alloc)
    , work_mode(0)
    , location_status(0)
    , attitude(0)
    , check_time(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef double _task_mile_type;
  _task_mile_type task_mile;

   typedef double _task_progresss_type;
  _task_progresss_type task_progresss;

   typedef int32_t _status_code_type;
  _status_code_type status_code;

   typedef int32_t _sub_code_type;
  _sub_code_type sub_code;

   typedef int32_t _segment_id_type;
  _segment_id_type segment_id;

   typedef int32_t _dir_type;
  _dir_type dir;

   typedef double _segment_mile_type;
  _segment_mile_type segment_mile;

   typedef int32_t _node_id_type;
  _node_id_type node_id;

   typedef int32_t _dst_node_type;
  _dst_node_type dst_node;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _vell_type;
  _vell_type vell;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _node_request_type;
  _node_request_type node_request;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _node_occupy_type;
  _node_occupy_type node_occupy;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _node_release_type;
  _node_release_type node_release;

   typedef int32_t _work_mode_type;
  _work_mode_type work_mode;

   typedef int32_t _location_status_type;
  _location_status_type location_status;

   typedef int32_t _attitude_type;
  _attitude_type attitude;

   typedef double _check_time_type;
  _check_time_type check_time;





  typedef boost::shared_ptr< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AgvStatusMsg_

typedef ::custom_sys_msgs::AgvStatusMsg_<std::allocator<void> > AgvStatusMsg;

typedef boost::shared_ptr< ::custom_sys_msgs::AgvStatusMsg > AgvStatusMsgPtr;
typedef boost::shared_ptr< ::custom_sys_msgs::AgvStatusMsg const> AgvStatusMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f28f5972085ecdebfb0eed879e9e6104";
  }

  static const char* value(const ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf28f5972085ecdebULL;
  static const uint64_t static_value2 = 0xfb0eed879e9e6104ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/AgvStatusMsg";
  }

  static const char* value(const ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_id\n\
float64 task_mile\n\
float64 task_progresss\n\
int32 status_code\n\
int32 sub_code\n\
int32 segment_id \n\
int32 dir\n\
float64 segment_mile \n\
int32 node_id\n\
int32 dst_node\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Twist vell\n\
int32[] node_request\n\
int32[] node_occupy\n\
int32[] node_release\n\
int32 work_mode\n\
int32 location_status\n\
int32 attitude\n\
float64 check_time\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.task_mile);
      stream.next(m.task_progresss);
      stream.next(m.status_code);
      stream.next(m.sub_code);
      stream.next(m.segment_id);
      stream.next(m.dir);
      stream.next(m.segment_mile);
      stream.next(m.node_id);
      stream.next(m.dst_node);
      stream.next(m.pose);
      stream.next(m.vell);
      stream.next(m.node_request);
      stream.next(m.node_occupy);
      stream.next(m.node_release);
      stream.next(m.work_mode);
      stream.next(m.location_status);
      stream.next(m.attitude);
      stream.next(m.check_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgvStatusMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::AgvStatusMsg_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "task_mile: ";
    Printer<double>::stream(s, indent + "  ", v.task_mile);
    s << indent << "task_progresss: ";
    Printer<double>::stream(s, indent + "  ", v.task_progresss);
    s << indent << "status_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status_code);
    s << indent << "sub_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_code);
    s << indent << "segment_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.segment_id);
    s << indent << "dir: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir);
    s << indent << "segment_mile: ";
    Printer<double>::stream(s, indent + "  ", v.segment_mile);
    s << indent << "node_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.node_id);
    s << indent << "dst_node: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dst_node);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "vell: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.vell);
    s << indent << "node_request[]" << std::endl;
    for (size_t i = 0; i < v.node_request.size(); ++i)
    {
      s << indent << "  node_request[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.node_request[i]);
    }
    s << indent << "node_occupy[]" << std::endl;
    for (size_t i = 0; i < v.node_occupy.size(); ++i)
    {
      s << indent << "  node_occupy[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.node_occupy[i]);
    }
    s << indent << "node_release[]" << std::endl;
    for (size_t i = 0; i < v.node_release.size(); ++i)
    {
      s << indent << "  node_release[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.node_release[i]);
    }
    s << indent << "work_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.work_mode);
    s << indent << "location_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.location_status);
    s << indent << "attitude: ";
    Printer<int32_t>::stream(s, indent + "  ", v.attitude);
    s << indent << "check_time: ";
    Printer<double>::stream(s, indent + "  ", v.check_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_AGVSTATUSMSG_H
