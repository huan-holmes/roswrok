// Generated by gencpp from file custom_sys_msgs/AgvTrajectoryMsg2.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_AGVTRAJECTORYMSG2_H
#define CUSTOM_SYS_MSGS_MESSAGE_AGVTRAJECTORYMSG2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <custom_sys_msgs/AgvLineMsg2.h>

namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct AgvTrajectoryMsg2_
{
  typedef AgvTrajectoryMsg2_<ContainerAllocator> Type;

  AgvTrajectoryMsg2_()
    : task_id(0)
    , task_type(0)
    , vehicle_id(0)
    , free_nav(0)
    , deadline(0.0)
    , dst_pose()
    , agv_trajectory()
    , test(0)  {
    }
  AgvTrajectoryMsg2_(const ContainerAllocator& _alloc)
    : task_id(0)
    , task_type(0)
    , vehicle_id(0)
    , free_nav(0)
    , deadline(0.0)
    , dst_pose(_alloc)
    , agv_trajectory(_alloc)
    , test(0)  {
  (void)_alloc;
    }



   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef int32_t _task_type_type;
  _task_type_type task_type;

   typedef int32_t _vehicle_id_type;
  _vehicle_id_type vehicle_id;

   typedef int32_t _free_nav_type;
  _free_nav_type free_nav;

   typedef double _deadline_type;
  _deadline_type deadline;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _dst_pose_type;
  _dst_pose_type dst_pose;

   typedef std::vector< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >::other >  _agv_trajectory_type;
  _agv_trajectory_type agv_trajectory;

   typedef int32_t _test_type;
  _test_type test;





  typedef boost::shared_ptr< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> const> ConstPtr;

}; // struct AgvTrajectoryMsg2_

typedef ::custom_sys_msgs::AgvTrajectoryMsg2_<std::allocator<void> > AgvTrajectoryMsg2;

typedef boost::shared_ptr< ::custom_sys_msgs::AgvTrajectoryMsg2 > AgvTrajectoryMsg2Ptr;
typedef boost::shared_ptr< ::custom_sys_msgs::AgvTrajectoryMsg2 const> AgvTrajectoryMsg2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b07c1f81ca25d93ada13ba8f99101b8";
  }

  static const char* value(const ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b07c1f81ca25d93ULL;
  static const uint64_t static_value2 = 0xada13ba8f99101b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/AgvTrajectoryMsg2";
  }

  static const char* value(const ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_id\n\
int32 task_type\n\
int32 vehicle_id\n\
int32 free_nav\n\
float64 deadline\n\
geometry_msgs/Pose dst_pose\n\
custom_sys_msgs/AgvLineMsg2[] agv_trajectory\n\
int32 test\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: custom_sys_msgs/AgvLineMsg2\n\
int32 segment_id\n\
int32 segment_type\n\
int32 attitude\n\
int32 tracking_mode\n\
float64 speed\n\
float64 precision\n\
float64 arrival_time\n\
float64 departure_time\n\
float64 redundancy_time\n\
geometry_msgs/Pose p_start\n\
geometry_msgs/Pose p_middle\n\
geometry_msgs/Pose p_end\n\
int32 start_node_id\n\
int32 end_node_id\n\
bool crossing\n\
";
  }

  static const char* value(const ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.task_type);
      stream.next(m.vehicle_id);
      stream.next(m.free_nav);
      stream.next(m.deadline);
      stream.next(m.dst_pose);
      stream.next(m.agv_trajectory);
      stream.next(m.test);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgvTrajectoryMsg2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::AgvTrajectoryMsg2_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "task_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_type);
    s << indent << "vehicle_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vehicle_id);
    s << indent << "free_nav: ";
    Printer<int32_t>::stream(s, indent + "  ", v.free_nav);
    s << indent << "deadline: ";
    Printer<double>::stream(s, indent + "  ", v.deadline);
    s << indent << "dst_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.dst_pose);
    s << indent << "agv_trajectory[]" << std::endl;
    for (size_t i = 0; i < v.agv_trajectory.size(); ++i)
    {
      s << indent << "  agv_trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::custom_sys_msgs::AgvLineMsg2_<ContainerAllocator> >::stream(s, indent + "    ", v.agv_trajectory[i]);
    }
    s << indent << "test: ";
    Printer<int32_t>::stream(s, indent + "  ", v.test);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_AGVTRAJECTORYMSG2_H
