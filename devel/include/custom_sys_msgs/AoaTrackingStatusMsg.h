// Generated by gencpp from file custom_sys_msgs/AoaTrackingStatusMsg.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_AOATRACKINGSTATUSMSG_H
#define CUSTOM_SYS_MSGS_MESSAGE_AOATRACKINGSTATUSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct AoaTrackingStatusMsg_
{
  typedef AoaTrackingStatusMsg_<ContainerAllocator> Type;

  AoaTrackingStatusMsg_()
    : task_id(0)
    , status_code(0)
    , sub_code(0)
    , remote_control_id(0)
    , distance(0.0)
    , angle(0.0)
    , pose()
    , is_front(false)  {
    }
  AoaTrackingStatusMsg_(const ContainerAllocator& _alloc)
    : task_id(0)
    , status_code(0)
    , sub_code(0)
    , remote_control_id(0)
    , distance(0.0)
    , angle(0.0)
    , pose(_alloc)
    , is_front(false)  {
  (void)_alloc;
    }



   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef int32_t _status_code_type;
  _status_code_type status_code;

   typedef int32_t _sub_code_type;
  _sub_code_type sub_code;

   typedef uint16_t _remote_control_id_type;
  _remote_control_id_type remote_control_id;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _angle_type;
  _angle_type angle;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint8_t _is_front_type;
  _is_front_type is_front;





  typedef boost::shared_ptr< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> const> ConstPtr;

}; // struct AoaTrackingStatusMsg_

typedef ::custom_sys_msgs::AoaTrackingStatusMsg_<std::allocator<void> > AoaTrackingStatusMsg;

typedef boost::shared_ptr< ::custom_sys_msgs::AoaTrackingStatusMsg > AoaTrackingStatusMsgPtr;
typedef boost::shared_ptr< ::custom_sys_msgs::AoaTrackingStatusMsg const> AoaTrackingStatusMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52b32098ccd8e26ce71eb10848abab91";
  }

  static const char* value(const ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52b32098ccd8e26cULL;
  static const uint64_t static_value2 = 0xe71eb10848abab91ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/AoaTrackingStatusMsg";
  }

  static const char* value(const ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_id\n\
int32 status_code\n\
int32 sub_code\n\
uint16 remote_control_id\n\
float64 distance\n\
float64 angle\n\
geometry_msgs/PoseStamped pose\n\
bool is_front\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.status_code);
      stream.next(m.sub_code);
      stream.next(m.remote_control_id);
      stream.next(m.distance);
      stream.next(m.angle);
      stream.next(m.pose);
      stream.next(m.is_front);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AoaTrackingStatusMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::AoaTrackingStatusMsg_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "status_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status_code);
    s << indent << "sub_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sub_code);
    s << indent << "remote_control_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.remote_control_id);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "is_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_front);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_AOATRACKINGSTATUSMSG_H
