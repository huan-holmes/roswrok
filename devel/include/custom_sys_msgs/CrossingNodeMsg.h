// Generated by gencpp from file custom_sys_msgs/CrossingNodeMsg.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_CROSSINGNODEMSG_H
#define CUSTOM_SYS_MSGS_MESSAGE_CROSSINGNODEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct CrossingNodeMsg_
{
  typedef CrossingNodeMsg_<ContainerAllocator> Type;

  CrossingNodeMsg_()
    : node_acquired()
    , node_released()
    , node_fobbidden()  {
    }
  CrossingNodeMsg_(const ContainerAllocator& _alloc)
    : node_acquired(_alloc)
    , node_released(_alloc)
    , node_fobbidden(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _node_acquired_type;
  _node_acquired_type node_acquired;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _node_released_type;
  _node_released_type node_released;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _node_fobbidden_type;
  _node_fobbidden_type node_fobbidden;





  typedef boost::shared_ptr< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> const> ConstPtr;

}; // struct CrossingNodeMsg_

typedef ::custom_sys_msgs::CrossingNodeMsg_<std::allocator<void> > CrossingNodeMsg;

typedef boost::shared_ptr< ::custom_sys_msgs::CrossingNodeMsg > CrossingNodeMsgPtr;
typedef boost::shared_ptr< ::custom_sys_msgs::CrossingNodeMsg const> CrossingNodeMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9dc9fa7b6fdf580a4e6988a6147a64b6";
  }

  static const char* value(const ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9dc9fa7b6fdf580aULL;
  static const uint64_t static_value2 = 0x4e6988a6147a64b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/CrossingNodeMsg";
  }

  static const char* value(const ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] node_acquired\n\
int32[] node_released\n\
int32[] node_fobbidden\n\
";
  }

  static const char* value(const ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_acquired);
      stream.next(m.node_released);
      stream.next(m.node_fobbidden);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CrossingNodeMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::CrossingNodeMsg_<ContainerAllocator>& v)
  {
    s << indent << "node_acquired[]" << std::endl;
    for (size_t i = 0; i < v.node_acquired.size(); ++i)
    {
      s << indent << "  node_acquired[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.node_acquired[i]);
    }
    s << indent << "node_released[]" << std::endl;
    for (size_t i = 0; i < v.node_released.size(); ++i)
    {
      s << indent << "  node_released[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.node_released[i]);
    }
    s << indent << "node_fobbidden[]" << std::endl;
    for (size_t i = 0; i < v.node_fobbidden.size(); ++i)
    {
      s << indent << "  node_fobbidden[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.node_fobbidden[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_CROSSINGNODEMSG_H
