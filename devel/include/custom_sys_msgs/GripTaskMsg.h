// Generated by gencpp from file custom_sys_msgs/GripTaskMsg.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_GRIPTASKMSG_H
#define CUSTOM_SYS_MSGS_MESSAGE_GRIPTASKMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct GripTaskMsg_
{
  typedef GripTaskMsg_<ContainerAllocator> Type;

  GripTaskMsg_()
    : src_dir(0)
    , src_height(0.0)
    , dst_dir(0)
    , dst_height(0.0)
    , final_homing(0)  {
    }
  GripTaskMsg_(const ContainerAllocator& _alloc)
    : src_dir(0)
    , src_height(0.0)
    , dst_dir(0)
    , dst_height(0.0)
    , final_homing(0)  {
  (void)_alloc;
    }



   typedef int8_t _src_dir_type;
  _src_dir_type src_dir;

   typedef float _src_height_type;
  _src_height_type src_height;

   typedef int8_t _dst_dir_type;
  _dst_dir_type dst_dir;

   typedef float _dst_height_type;
  _dst_height_type dst_height;

   typedef int8_t _final_homing_type;
  _final_homing_type final_homing;





  typedef boost::shared_ptr< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> const> ConstPtr;

}; // struct GripTaskMsg_

typedef ::custom_sys_msgs::GripTaskMsg_<std::allocator<void> > GripTaskMsg;

typedef boost::shared_ptr< ::custom_sys_msgs::GripTaskMsg > GripTaskMsgPtr;
typedef boost::shared_ptr< ::custom_sys_msgs::GripTaskMsg const> GripTaskMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edcdb33fee8dd1cca389a115bb5f85d4";
  }

  static const char* value(const ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedcdb33fee8dd1ccULL;
  static const uint64_t static_value2 = 0xa389a115bb5f85d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/GripTaskMsg";
  }

  static const char* value(const ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 src_dir\n\
float32 src_height\n\
int8 dst_dir\n\
float32 dst_height\n\
int8 final_homing\n\
";
  }

  static const char* value(const ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.src_dir);
      stream.next(m.src_height);
      stream.next(m.dst_dir);
      stream.next(m.dst_height);
      stream.next(m.final_homing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripTaskMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::GripTaskMsg_<ContainerAllocator>& v)
  {
    s << indent << "src_dir: ";
    Printer<int8_t>::stream(s, indent + "  ", v.src_dir);
    s << indent << "src_height: ";
    Printer<float>::stream(s, indent + "  ", v.src_height);
    s << indent << "dst_dir: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dst_dir);
    s << indent << "dst_height: ";
    Printer<float>::stream(s, indent + "  ", v.dst_height);
    s << indent << "final_homing: ";
    Printer<int8_t>::stream(s, indent + "  ", v.final_homing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_GRIPTASKMSG_H
