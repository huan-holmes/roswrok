// Generated by gencpp from file custom_sys_msgs/SensorStatusMsg.msg
// DO NOT EDIT!


#ifndef CUSTOM_SYS_MSGS_MESSAGE_SENSORSTATUSMSG_H
#define CUSTOM_SYS_MSGS_MESSAGE_SENSORSTATUSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_sys_msgs
{
template <class ContainerAllocator>
struct SensorStatusMsg_
{
  typedef SensorStatusMsg_<ContainerAllocator> Type;

  SensorStatusMsg_()
    : laser(0)
    , base(0)
    , sonar(0)
    , vision(0)
    , odom(0)
    , uwb(0)
    , emergency(0)
    , charge(0)
    , power()  {
    }
  SensorStatusMsg_(const ContainerAllocator& _alloc)
    : laser(0)
    , base(0)
    , sonar(0)
    , vision(0)
    , odom(0)
    , uwb(0)
    , emergency(0)
    , charge(0)
    , power(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _laser_type;
  _laser_type laser;

   typedef int32_t _base_type;
  _base_type base;

   typedef int32_t _sonar_type;
  _sonar_type sonar;

   typedef int32_t _vision_type;
  _vision_type vision;

   typedef int32_t _odom_type;
  _odom_type odom;

   typedef int32_t _uwb_type;
  _uwb_type uwb;

   typedef int32_t _emergency_type;
  _emergency_type emergency;

   typedef int32_t _charge_type;
  _charge_type charge;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _power_type;
  _power_type power;





  typedef boost::shared_ptr< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> const> ConstPtr;

}; // struct SensorStatusMsg_

typedef ::custom_sys_msgs::SensorStatusMsg_<std::allocator<void> > SensorStatusMsg;

typedef boost::shared_ptr< ::custom_sys_msgs::SensorStatusMsg > SensorStatusMsgPtr;
typedef boost::shared_ptr< ::custom_sys_msgs::SensorStatusMsg const> SensorStatusMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_sys_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'custom_sys_msgs': ['/home/boocax/roswork/src/custom_sys_msgs/msg', '/home/boocax/roswork/devel/share/custom_sys_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64dec694a8aac012670ece9363dd4bfd";
  }

  static const char* value(const ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64dec694a8aac012ULL;
  static const uint64_t static_value2 = 0x670ece9363dd4bfdULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_sys_msgs/SensorStatusMsg";
  }

  static const char* value(const ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 laser\n\
int32 base\n\
int32 sonar\n\
int32 vision\n\
int32 odom\n\
int32 uwb\n\
int32 emergency\n\
int32 charge\n\
string power\n\
";
  }

  static const char* value(const ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.laser);
      stream.next(m.base);
      stream.next(m.sonar);
      stream.next(m.vision);
      stream.next(m.odom);
      stream.next(m.uwb);
      stream.next(m.emergency);
      stream.next(m.charge);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorStatusMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_sys_msgs::SensorStatusMsg_<ContainerAllocator>& v)
  {
    s << indent << "laser: ";
    Printer<int32_t>::stream(s, indent + "  ", v.laser);
    s << indent << "base: ";
    Printer<int32_t>::stream(s, indent + "  ", v.base);
    s << indent << "sonar: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sonar);
    s << indent << "vision: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vision);
    s << indent << "odom: ";
    Printer<int32_t>::stream(s, indent + "  ", v.odom);
    s << indent << "uwb: ";
    Printer<int32_t>::stream(s, indent + "  ", v.uwb);
    s << indent << "emergency: ";
    Printer<int32_t>::stream(s, indent + "  ", v.emergency);
    s << indent << "charge: ";
    Printer<int32_t>::stream(s, indent + "  ", v.charge);
    s << indent << "power: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_SYS_MSGS_MESSAGE_SENSORSTATUSMSG_H
