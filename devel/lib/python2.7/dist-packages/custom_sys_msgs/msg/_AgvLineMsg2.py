# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_sys_msgs/AgvLineMsg2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class AgvLineMsg2(genpy.Message):
  _md5sum = "2d421422889a341f7cf947ef206bc0e3"
  _type = "custom_sys_msgs/AgvLineMsg2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 segment_id
int32 segment_type
int32 attitude
int32 tracking_mode
float64 speed
float64 precision
float64 arrival_time
float64 departure_time
float64 redundancy_time
geometry_msgs/Pose p_start
geometry_msgs/Pose p_middle
geometry_msgs/Pose p_end
int32 start_node_id
int32 end_node_id
bool crossing

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['segment_id','segment_type','attitude','tracking_mode','speed','precision','arrival_time','departure_time','redundancy_time','p_start','p_middle','p_end','start_node_id','end_node_id','crossing']
  _slot_types = ['int32','int32','int32','int32','float64','float64','float64','float64','float64','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       segment_id,segment_type,attitude,tracking_mode,speed,precision,arrival_time,departure_time,redundancy_time,p_start,p_middle,p_end,start_node_id,end_node_id,crossing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AgvLineMsg2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.segment_id is None:
        self.segment_id = 0
      if self.segment_type is None:
        self.segment_type = 0
      if self.attitude is None:
        self.attitude = 0
      if self.tracking_mode is None:
        self.tracking_mode = 0
      if self.speed is None:
        self.speed = 0.
      if self.precision is None:
        self.precision = 0.
      if self.arrival_time is None:
        self.arrival_time = 0.
      if self.departure_time is None:
        self.departure_time = 0.
      if self.redundancy_time is None:
        self.redundancy_time = 0.
      if self.p_start is None:
        self.p_start = geometry_msgs.msg.Pose()
      if self.p_middle is None:
        self.p_middle = geometry_msgs.msg.Pose()
      if self.p_end is None:
        self.p_end = geometry_msgs.msg.Pose()
      if self.start_node_id is None:
        self.start_node_id = 0
      if self.end_node_id is None:
        self.end_node_id = 0
      if self.crossing is None:
        self.crossing = False
    else:
      self.segment_id = 0
      self.segment_type = 0
      self.attitude = 0
      self.tracking_mode = 0
      self.speed = 0.
      self.precision = 0.
      self.arrival_time = 0.
      self.departure_time = 0.
      self.redundancy_time = 0.
      self.p_start = geometry_msgs.msg.Pose()
      self.p_middle = geometry_msgs.msg.Pose()
      self.p_end = geometry_msgs.msg.Pose()
      self.start_node_id = 0
      self.end_node_id = 0
      self.crossing = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i26d2iB().pack(_x.segment_id, _x.segment_type, _x.attitude, _x.tracking_mode, _x.speed, _x.precision, _x.arrival_time, _x.departure_time, _x.redundancy_time, _x.p_start.position.x, _x.p_start.position.y, _x.p_start.position.z, _x.p_start.orientation.x, _x.p_start.orientation.y, _x.p_start.orientation.z, _x.p_start.orientation.w, _x.p_middle.position.x, _x.p_middle.position.y, _x.p_middle.position.z, _x.p_middle.orientation.x, _x.p_middle.orientation.y, _x.p_middle.orientation.z, _x.p_middle.orientation.w, _x.p_end.position.x, _x.p_end.position.y, _x.p_end.position.z, _x.p_end.orientation.x, _x.p_end.orientation.y, _x.p_end.orientation.z, _x.p_end.orientation.w, _x.start_node_id, _x.end_node_id, _x.crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p_start is None:
        self.p_start = geometry_msgs.msg.Pose()
      if self.p_middle is None:
        self.p_middle = geometry_msgs.msg.Pose()
      if self.p_end is None:
        self.p_end = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 233
      (_x.segment_id, _x.segment_type, _x.attitude, _x.tracking_mode, _x.speed, _x.precision, _x.arrival_time, _x.departure_time, _x.redundancy_time, _x.p_start.position.x, _x.p_start.position.y, _x.p_start.position.z, _x.p_start.orientation.x, _x.p_start.orientation.y, _x.p_start.orientation.z, _x.p_start.orientation.w, _x.p_middle.position.x, _x.p_middle.position.y, _x.p_middle.position.z, _x.p_middle.orientation.x, _x.p_middle.orientation.y, _x.p_middle.orientation.z, _x.p_middle.orientation.w, _x.p_end.position.x, _x.p_end.position.y, _x.p_end.position.z, _x.p_end.orientation.x, _x.p_end.orientation.y, _x.p_end.orientation.z, _x.p_end.orientation.w, _x.start_node_id, _x.end_node_id, _x.crossing,) = _get_struct_4i26d2iB().unpack(str[start:end])
      self.crossing = bool(self.crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i26d2iB().pack(_x.segment_id, _x.segment_type, _x.attitude, _x.tracking_mode, _x.speed, _x.precision, _x.arrival_time, _x.departure_time, _x.redundancy_time, _x.p_start.position.x, _x.p_start.position.y, _x.p_start.position.z, _x.p_start.orientation.x, _x.p_start.orientation.y, _x.p_start.orientation.z, _x.p_start.orientation.w, _x.p_middle.position.x, _x.p_middle.position.y, _x.p_middle.position.z, _x.p_middle.orientation.x, _x.p_middle.orientation.y, _x.p_middle.orientation.z, _x.p_middle.orientation.w, _x.p_end.position.x, _x.p_end.position.y, _x.p_end.position.z, _x.p_end.orientation.x, _x.p_end.orientation.y, _x.p_end.orientation.z, _x.p_end.orientation.w, _x.start_node_id, _x.end_node_id, _x.crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p_start is None:
        self.p_start = geometry_msgs.msg.Pose()
      if self.p_middle is None:
        self.p_middle = geometry_msgs.msg.Pose()
      if self.p_end is None:
        self.p_end = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 233
      (_x.segment_id, _x.segment_type, _x.attitude, _x.tracking_mode, _x.speed, _x.precision, _x.arrival_time, _x.departure_time, _x.redundancy_time, _x.p_start.position.x, _x.p_start.position.y, _x.p_start.position.z, _x.p_start.orientation.x, _x.p_start.orientation.y, _x.p_start.orientation.z, _x.p_start.orientation.w, _x.p_middle.position.x, _x.p_middle.position.y, _x.p_middle.position.z, _x.p_middle.orientation.x, _x.p_middle.orientation.y, _x.p_middle.orientation.z, _x.p_middle.orientation.w, _x.p_end.position.x, _x.p_end.position.y, _x.p_end.position.z, _x.p_end.orientation.x, _x.p_end.orientation.y, _x.p_end.orientation.z, _x.p_end.orientation.w, _x.start_node_id, _x.end_node_id, _x.crossing,) = _get_struct_4i26d2iB().unpack(str[start:end])
      self.crossing = bool(self.crossing)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4i26d2iB = None
def _get_struct_4i26d2iB():
    global _struct_4i26d2iB
    if _struct_4i26d2iB is None:
        _struct_4i26d2iB = struct.Struct("<4i26d2iB")
    return _struct_4i26d2iB
