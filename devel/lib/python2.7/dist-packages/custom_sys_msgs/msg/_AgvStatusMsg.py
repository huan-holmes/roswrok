# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_sys_msgs/AgvStatusMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class AgvStatusMsg(genpy.Message):
  _md5sum = "f28f5972085ecdebfb0eed879e9e6104"
  _type = "custom_sys_msgs/AgvStatusMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 task_id
float64 task_mile
float64 task_progresss
int32 status_code
int32 sub_code
int32 segment_id 
int32 dir
float64 segment_mile 
int32 node_id
int32 dst_node
geometry_msgs/Pose pose
geometry_msgs/Twist vell
int32[] node_request
int32[] node_occupy
int32[] node_release
int32 work_mode
int32 location_status
int32 attitude
float64 check_time
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['task_id','task_mile','task_progresss','status_code','sub_code','segment_id','dir','segment_mile','node_id','dst_node','pose','vell','node_request','node_occupy','node_release','work_mode','location_status','attitude','check_time']
  _slot_types = ['int32','float64','float64','int32','int32','int32','int32','float64','int32','int32','geometry_msgs/Pose','geometry_msgs/Twist','int32[]','int32[]','int32[]','int32','int32','int32','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_id,task_mile,task_progresss,status_code,sub_code,segment_id,dir,segment_mile,node_id,dst_node,pose,vell,node_request,node_occupy,node_release,work_mode,location_status,attitude,check_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AgvStatusMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.task_id is None:
        self.task_id = 0
      if self.task_mile is None:
        self.task_mile = 0.
      if self.task_progresss is None:
        self.task_progresss = 0.
      if self.status_code is None:
        self.status_code = 0
      if self.sub_code is None:
        self.sub_code = 0
      if self.segment_id is None:
        self.segment_id = 0
      if self.dir is None:
        self.dir = 0
      if self.segment_mile is None:
        self.segment_mile = 0.
      if self.node_id is None:
        self.node_id = 0
      if self.dst_node is None:
        self.dst_node = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.vell is None:
        self.vell = geometry_msgs.msg.Twist()
      if self.node_request is None:
        self.node_request = []
      if self.node_occupy is None:
        self.node_occupy = []
      if self.node_release is None:
        self.node_release = []
      if self.work_mode is None:
        self.work_mode = 0
      if self.location_status is None:
        self.location_status = 0
      if self.attitude is None:
        self.attitude = 0
      if self.check_time is None:
        self.check_time = 0.
    else:
      self.task_id = 0
      self.task_mile = 0.
      self.task_progresss = 0.
      self.status_code = 0
      self.sub_code = 0
      self.segment_id = 0
      self.dir = 0
      self.segment_mile = 0.
      self.node_id = 0
      self.dst_node = 0
      self.pose = geometry_msgs.msg.Pose()
      self.vell = geometry_msgs.msg.Twist()
      self.node_request = []
      self.node_occupy = []
      self.node_release = []
      self.work_mode = 0
      self.location_status = 0
      self.attitude = 0
      self.check_time = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2d4id2i13d().pack(_x.task_id, _x.task_mile, _x.task_progresss, _x.status_code, _x.sub_code, _x.segment_id, _x.dir, _x.segment_mile, _x.node_id, _x.dst_node, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vell.linear.x, _x.vell.linear.y, _x.vell.linear.z, _x.vell.angular.x, _x.vell.angular.y, _x.vell.angular.z))
      length = len(self.node_request)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.node_request))
      length = len(self.node_occupy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.node_occupy))
      length = len(self.node_release)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.node_release))
      _x = self
      buff.write(_get_struct_3id().pack(_x.work_mode, _x.location_status, _x.attitude, _x.check_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.vell is None:
        self.vell = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 156
      (_x.task_id, _x.task_mile, _x.task_progresss, _x.status_code, _x.sub_code, _x.segment_id, _x.dir, _x.segment_mile, _x.node_id, _x.dst_node, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vell.linear.x, _x.vell.linear.y, _x.vell.linear.z, _x.vell.angular.x, _x.vell.angular.y, _x.vell.angular.z,) = _get_struct_i2d4id2i13d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.node_request = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.node_occupy = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.node_release = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 20
      (_x.work_mode, _x.location_status, _x.attitude, _x.check_time,) = _get_struct_3id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2d4id2i13d().pack(_x.task_id, _x.task_mile, _x.task_progresss, _x.status_code, _x.sub_code, _x.segment_id, _x.dir, _x.segment_mile, _x.node_id, _x.dst_node, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vell.linear.x, _x.vell.linear.y, _x.vell.linear.z, _x.vell.angular.x, _x.vell.angular.y, _x.vell.angular.z))
      length = len(self.node_request)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.node_request.tostring())
      length = len(self.node_occupy)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.node_occupy.tostring())
      length = len(self.node_release)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.node_release.tostring())
      _x = self
      buff.write(_get_struct_3id().pack(_x.work_mode, _x.location_status, _x.attitude, _x.check_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.vell is None:
        self.vell = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 156
      (_x.task_id, _x.task_mile, _x.task_progresss, _x.status_code, _x.sub_code, _x.segment_id, _x.dir, _x.segment_mile, _x.node_id, _x.dst_node, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.vell.linear.x, _x.vell.linear.y, _x.vell.linear.z, _x.vell.angular.x, _x.vell.angular.y, _x.vell.angular.z,) = _get_struct_i2d4id2i13d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.node_request = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.node_occupy = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.node_release = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.work_mode, _x.location_status, _x.attitude, _x.check_time,) = _get_struct_3id().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2d4id2i13d = None
def _get_struct_i2d4id2i13d():
    global _struct_i2d4id2i13d
    if _struct_i2d4id2i13d is None:
        _struct_i2d4id2i13d = struct.Struct("<i2d4id2i13d")
    return _struct_i2d4id2i13d
_struct_3id = None
def _get_struct_3id():
    global _struct_3id
    if _struct_3id is None:
        _struct_3id = struct.Struct("<3id")
    return _struct_3id
