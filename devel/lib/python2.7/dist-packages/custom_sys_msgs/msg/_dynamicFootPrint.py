# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from custom_sys_msgs/dynamicFootPrint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class dynamicFootPrint(genpy.Message):
  _md5sum = "b198cd1c56ad3f0f3cc7882ae559bf05"
  _type = "custom_sys_msgs/dynamicFootPrint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 robot_radius
float64 pole_distance
string footprint
string pole_footprint
float64 pre_robot_radius
string body_footprint"""
  __slots__ = ['robot_radius','pole_distance','footprint','pole_footprint','pre_robot_radius','body_footprint']
  _slot_types = ['float64','float64','string','string','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_radius,pole_distance,footprint,pole_footprint,pre_robot_radius,body_footprint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dynamicFootPrint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot_radius is None:
        self.robot_radius = 0.
      if self.pole_distance is None:
        self.pole_distance = 0.
      if self.footprint is None:
        self.footprint = ''
      if self.pole_footprint is None:
        self.pole_footprint = ''
      if self.pre_robot_radius is None:
        self.pre_robot_radius = 0.
      if self.body_footprint is None:
        self.body_footprint = ''
    else:
      self.robot_radius = 0.
      self.pole_distance = 0.
      self.footprint = ''
      self.pole_footprint = ''
      self.pre_robot_radius = 0.
      self.body_footprint = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.robot_radius, _x.pole_distance))
      _x = self.footprint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pole_footprint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.pre_robot_radius))
      _x = self.body_footprint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.robot_radius, _x.pole_distance,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.footprint = str[start:end].decode('utf-8')
      else:
        self.footprint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pole_footprint = str[start:end].decode('utf-8')
      else:
        self.pole_footprint = str[start:end]
      start = end
      end += 8
      (self.pre_robot_radius,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_footprint = str[start:end].decode('utf-8')
      else:
        self.body_footprint = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2d().pack(_x.robot_radius, _x.pole_distance))
      _x = self.footprint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pole_footprint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_d().pack(self.pre_robot_radius))
      _x = self.body_footprint
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.robot_radius, _x.pole_distance,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.footprint = str[start:end].decode('utf-8')
      else:
        self.footprint = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pole_footprint = str[start:end].decode('utf-8')
      else:
        self.pole_footprint = str[start:end]
      start = end
      end += 8
      (self.pre_robot_radius,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_footprint = str[start:end].decode('utf-8')
      else:
        self.body_footprint = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
