# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from teb_local_planner/AgvLineMsg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class AgvLineMsg(genpy.Message):
  _md5sum = "8a938cc1a16df264a8bdf537bad11201"
  _type = "teb_local_planner/AgvLineMsg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The pose of the robot
geometry_msgs/Pose[3] poses

std_msgs/Int32 type

std_msgs/Int32 path_id

float64 vel

int32 crossing

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Int32
int32 data"""
  __slots__ = ['poses','type','path_id','vel','crossing']
  _slot_types = ['geometry_msgs/Pose[3]','std_msgs/Int32','std_msgs/Int32','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       poses,type,path_id,vel,crossing

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AgvLineMsg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.poses is None:
        self.poses = [geometry_msgs.msg.Pose() for _ in range(3)]
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.path_id is None:
        self.path_id = std_msgs.msg.Int32()
      if self.vel is None:
        self.vel = 0.
      if self.crossing is None:
        self.crossing = 0
    else:
      self.poses = [geometry_msgs.msg.Pose() for _ in range(3)]
      self.type = std_msgs.msg.Int32()
      self.path_id = std_msgs.msg.Int32()
      self.vel = 0.
      self.crossing = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      for val1 in self.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_2idi().pack(_x.type.data, _x.path_id.data, _x.vel, _x.crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.poses is None:
        self.poses = None
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.path_id is None:
        self.path_id = std_msgs.msg.Int32()
      end = 0
      self.poses = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.append(val1)
      _x = self
      start = end
      end += 20
      (_x.type.data, _x.path_id.data, _x.vel, _x.crossing,) = _get_struct_2idi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      for val1 in self.poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_2idi().pack(_x.type.data, _x.path_id.data, _x.vel, _x.crossing))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.poses is None:
        self.poses = None
      if self.type is None:
        self.type = std_msgs.msg.Int32()
      if self.path_id is None:
        self.path_id = std_msgs.msg.Int32()
      end = 0
      self.poses = []
      for i in range(0, 3):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.poses.append(val1)
      _x = self
      start = end
      end += 20
      (_x.type.data, _x.path_id.data, _x.vel, _x.crossing,) = _get_struct_2idi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2idi = None
def _get_struct_2idi():
    global _struct_2idi
    if _struct_2idi is None:
        _struct_2idi = struct.Struct("<2idi")
    return _struct_2idi
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
